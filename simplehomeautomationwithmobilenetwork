1) flask acts as a centralized websocket server, ESP32 + react + flutter app will works as a websocket client for this project which controls the home automation with mobile internet only
from flask import Flask, request
from flask_socketio import SocketIO, emit
from flask_cors import CORS

app = Flask(__name__)
CORS(app)
socketio = SocketIO(app, cors_allowed_origins="*")

@socketio.on('connect')
def handle_connect():
    print('Client connected:', request.sid)
    emit('status', 'connected to cloud')

@socketio.on('message')
def handle_message(data):
    print('Received:', data)
    # Broadcast to all clients
    emit('message', data, broadcast=True)

@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected:', request.sid)

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000)

2) html, talwind css, javascript acts as a websocket client
<!DOCTYPE HTML>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>ESP WebSocket Server</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-gray-900 font-sans">

  <div class="bg-teal-800 p-6 text-center">
    <h1 class="text-white text-3xl">ESP WebSocket Server</h1>
  </div>

  <div class="max-w-xl mx-auto p-4">
    <div class="bg-white shadow-lg rounded-lg p-6">
      <h2 class="text-xl font-bold text-teal-700">Output - GPIO 2</h2>
      <p class="text-lg font-medium text-gray-600">State: <span id="state" class="text-teal-600">OFF</span></p>
      <button id="button" class="mt-4 bg-teal-600 text-white py-2 px-6 rounded-md hover:bg-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-400">Toggle</button>
    </div>
  </div>

  <script>
    var gateway = `ws://192.168.1.60/ws`;
    var websocket;

    window.addEventListener('load', onLoad);

    function initWebSocket() {
      console.log('Trying to open a WebSocket connection...');
      websocket = new WebSocket(gateway);
      websocket.onopen    = onOpen;
      websocket.onclose   = onClose;
      websocket.onmessage = onMessage;
    }

    function onOpen(event) {
      console.log('Connection opened');
    }

    function onClose(event) {
      console.log('Connection closed');
      setTimeout(initWebSocket, 2000);
    }

    function onMessage(event) {
      var state = event.data === "1" ? "ON" : "OFF";
      document.getElementById('state').innerHTML = state;
    }

    function toggle() {
      websocket.send('toggle');
    }

    function onLoad(event) {
      initWebSocket();
      document.getElementById('button').addEventListener('click', toggle);
    }
  </script>

</body>
</html>

3) esp32 acts as a websocket client
#include <WiFi.h>
#include <WebSocketsClient.h>

const char* ssid = "TP-Link_474C";
const char* password = "55185295";

const char* websocket_host = "192.168.1.100"; // ðŸ‘‰ Replace with your Flask server IP
const uint16_t websocket_port = 5000;
const char* websocket_path = "/socket.io/?EIO=4&transport=websocket";

bool ledState = 0;
const int ledPin = 2;

WebSocketsClient webSocket;

void sendLEDStatus() {
  String status = ledState ? "ON" : "OFF";
  webSocket.sendTXT(status);
  Serial.print("Sent to server: ");
  Serial.println(status);
}

void handleWebSocketMessage(uint8_t *payload, size_t length) {
  payload[length] = '\0';  // Null-terminate payload
  String message = String((char*)payload);
  Serial.print("Received from server: ");
  Serial.println(message);

  if (message == "toggle") {
    ledState = !ledState;
    sendLEDStatus(); // Send updated status back to Flask
  }
}

void webSocketEvent(WStype_t type, uint8_t *payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      Serial.println("WebSocket disconnected");
      break;

    case WStype_CONNECTED:
      Serial.println("WebSocket connected");
      webSocket.sendTXT("ESP32 connected");  // Initial hello
      break;

    case WStype_TEXT:
      handleWebSocketMessage(payload, length);
      break;

    default:
      break;
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.print("Connected! IP: ");
  Serial.println(WiFi.localIP());

  webSocket.begin(websocket_host, websocket_port, websocket_path);
  webSocket.onEvent(webSocketEvent);
  webSocket.setReconnectInterval(5000); // Auto-reconnect
}

void loop() {
  webSocket.loop();                   // WebSocket handler
  digitalWrite(ledPin, ledState);     // LED control
}
