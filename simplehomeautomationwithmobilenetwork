1) flask acts as a centralized websocket server, ESP32 + react + flutter app will works as a websocket client for this project which controls the home automation with mobile internet only
from flask import Flask, request
from flask_socketio import SocketIO, emit
import json

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, cors_allowed_origins="*", async_mode="eventlet")

# Store device states
devices = {
    'DOOR LOCK': 'LOCKED',
    'DOWNLIGHTS': 'OFF',
    'BEDROOM': 'OFF',
    'TV': 'OFF',
    'SPEAKER R': 'OFF',
    'SPEAKER L': 'OFF',
    'IWATCH': 'OFF',
    'AIRCND': 'OFF'
}

@app.route('/')
def index():
    return "Flask-SocketIO Server Running"

# Client connected
@socketio.on('connect')
def handle_connect():
    print('Client connected')
    # Send current device states on connect
    emit('device_states', devices)

# Client disconnected
@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected')

# Receive command from client using 'device_status'
@socketio.on('device_status')
def handle_device_status(data):
    print(f"Received command: {data}")
    try:
        device = data.get('device')
        status = data.get('status')

        if device in devices:
            devices[device] = status
            # Broadcast updated status to all clients
            emit('device_update', {'device': device, 'status': status}, broadcast=True)
        else:
            print("Unknown device:", device)
    except Exception as e:
        print("Error handling command:", e)

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000)


2) html, talwind css, javascript acts as a websocket client
<!DOCTYPE HTML>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>ESP Socket.IO Client</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Add Socket.IO client script -->
  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js" integrity="sha384-E3G8dgmZJce0TkYloIgKhnlG6ijMnE9uvE5B78Tn4oCJ+PBvBFg9JsmX8kYjGVxg" crossorigin="anonymous"></script>
</head>
<body class="bg-gray-100 text-gray-900 font-sans">

  <div class="bg-teal-800 p-6 text-center">
    <h1 class="text-white text-3xl">ESP Socket.IO Server</h1>
  </div>

  <div class="max-w-xl mx-auto p-4">
    <div class="bg-white shadow-lg rounded-lg p-6">
      <h2 class="text-xl font-bold text-teal-700">Output - GPIO 2</h2>
      <p class="text-lg font-medium text-gray-600">State: <span id="state" class="text-teal-600">OFF</span></p>
      <button id="button" class="mt-4 bg-teal-600 text-white py-2 px-6 rounded-md hover:bg-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-400">Toggle</button>
    </div>
  </div>

  <script>
    const socket = io('http://192.168.1.21:5000');

    socket.on('connect', () => {
      console.log('Connected to Socket.IO server');
    });

    socket.on('device_update', function(data) {
      // Assuming data = { device: "GPIO2", status: "ON" or "OFF" }
      if (data.device === 'GPIO2') {
        document.getElementById('state').innerText = data.status;
      }
    });

    document.getElementById('button').addEventListener('click', function () {
      // Send a toggle request
      socket.emit('device_status', {
        device: 'GPIO2',
        status: document.getElementById('state').innerText === 'ON' ? 'OFF' : 'ON'
      });
    });
  </script>

</body>
</html>


3) esp32 acts as a websocket client
#include <WiFi.h>
#include <SocketIOclient.h>
#include <ArduinoJson.h>

const char* ssid = "TP-Link_474C";
const char* password = "55185295";
const char* host = "192.168.1.21";
const uint16_t port = 5000;
const char* path = "/socket.io/?EIO=4";

SocketIOclient socketIO;

const int ledPin = 2;

void handleDeviceUpdate(const char* payload) {
  DynamicJsonDocument doc(1024);
  DeserializationError error = deserializeJson(doc, payload);

  if (error) {
    Serial.print("JSON Parse Error: ");
    Serial.println(error.c_str());
    return;
  }

  if (!doc.is<JsonArray>()) return;

  const char* eventName = doc[0];
  JsonObject data = doc[1];

  if (strcmp(eventName, "device_update") == 0) {
    const char* device = data["device"];
    const char* status = data["status"];

    if (strcmp(device, "DOOR LOCK") == 0) {
      if (strcmp(status, "LOCKED") == 0) {
        digitalWrite(ledPin, LOW);
        Serial.println("LED ON: DOOR LOCKED");
      } else if (strcmp(status, "UNLOCK") == 0) {
        digitalWrite(ledPin, HIGH);
        Serial.println("LED OFF: DOOR UNLOCKED");
      }
    }
  }
}

void onSocketEvent(socketIOmessageType_t type, uint8_t * payload, size_t length) {
  switch (type) {
    case sIOtype_CONNECT:
      Serial.println("[SocketIO] Connected.");
      socketIO.send(sIOtype_CONNECT, "/");
      break;

    case sIOtype_EVENT:
      Serial.print("[SocketIO] Received: ");
      Serial.write(payload, length);
      Serial.println();
      handleDeviceUpdate((const char*)payload);
      break;

    case sIOtype_DISCONNECT:
      Serial.println("[SocketIO] Disconnected.");
      break;

    case sIOtype_ERROR:
      Serial.println("[SocketIO] Error.");
      break;

    default:
      break;
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  socketIO.begin(host, port, path);
  socketIO.onEvent(onSocketEvent);
}

void loop() {
  socketIO.loop();
}


EX-4 flutter app
import 'package:flutter/material.dart';
import 'package:socket_io_client/socket_io_client.dart' as IO;

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  late IO.Socket socket;

  List<Map<String, String>> devices = [
    {'name': 'DOOR LOCK', 'status': 'OFF'},
    {'name': 'DOWNLIGHTS', 'status': 'OFF'},
    {'name': 'BEDROOM', 'status': 'OFF'},
    {'name': 'TV', 'status': 'OFF'},
    {'name': 'SPEAKER R', 'status': 'OFF'},
    {'name': 'SPEAKER L', 'status': 'OFF'},
    {'name': 'IWATCH', 'status': 'OFF'},
    {'name': 'AIRCND', 'status': 'OFF'},
  ];

  @override
  void initState() {
    super.initState();
    connectSocketIO();
  }

  void connectSocketIO() {
    socket = IO.io('http://192.168.1.21:5000', <String, dynamic>{
      'transports': ['websocket'],
      'autoConnect': false,
    });

    socket.connect();

    socket.onConnect((_) {
      print('Connected to Flask');
    });

    socket.on('device_status', (data) {
      print('Received from Flask: $data');
      setState(() {
        String deviceName = data['device'];
        String status = data['status'];
        int index = devices.indexWhere((d) => d['name'] == deviceName);
        if (index != -1) {
          devices[index]['status'] = status;
        }
      });
    });

    socket.onDisconnect((_) {
      print('Disconnected from Flask');
    });
  }

  void sendWebSocketCommand(String device, String status) {
    if (socket.connected) {
      final message = {'device': device, 'status': status};
      socket.emit('device_status', message);
      print('Sent: $message');
    } else {
      print('Socket not connected');
    }
  }

  void toggleDevice(Map<String, String> device) {
    setState(() {
      int index = devices.indexWhere((d) => d['name'] == device['name']);
      if (index != -1) {
        if (device['name'] == 'DOOR LOCK') {
          devices[index]['status'] =
              devices[index]['status'] == 'LOCKED' ? 'UNLOCK' : 'LOCKED';
        } else {
          devices[index]['status'] =
              devices[index]['status'] == 'ON' ? 'OFF' : 'ON';
        }
        sendWebSocketCommand(devices[index]['name']!, devices[index]['status']!);
      }
    });
  }

  IconData getDeviceIcon(String deviceName) {
    switch (deviceName.toUpperCase()) {
      case 'DOOR LOCK':
        return Icons.door_front_door;
      case 'DOWNLIGHTS':
        return Icons.lightbulb;
      case 'BEDROOM':
        return Icons.bed;
      case 'TV':
        return Icons.tv;
      case 'SPEAKER R':
      case 'SPEAKER L':
        return Icons.speaker;
      case 'IWATCH':
        return Icons.watch;
      case 'AIRCND':
        return Icons.ac_unit;
      default:
        return Icons.device_unknown;
    }
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 3,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Home Automation'),
          bottom: const TabBar(
            tabs: [
              Tab(text: 'All'),
              Tab(text: 'Living Room'),
              Tab(text: 'Bedrooms'),
            ],
          ),
        ),
        body: TabBarView(
          children: [
            buildGrid(devices),
            buildGrid(devices.sublist(0, 4)),
            buildGrid(devices.sublist(4)),
          ],
        ),
      ),
    );
  }

  Widget buildGrid(List<Map<String, String>> items) {
    return Padding(
      padding: const EdgeInsets.all(10.0),
      child: GridView.builder(
        itemCount: items.length,
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          mainAxisSpacing: 10,
          crossAxisSpacing: 10,
          childAspectRatio: 1.0,
        ),
        itemBuilder: (context, index) {
          final device = items[index];
          final isOn = device['status'] == 'ON' || device['status'] == 'UNLOCK';

          return GestureDetector(
            onTap: () => toggleDevice(device),
            child: Card(
              elevation: 4,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15),
              ),
              child: Padding(
                padding: const EdgeInsets.all(12),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          getDeviceIcon(device['name']!),
                          size: 45,
                          color: Colors.blueGrey,
                        ),
                        const SizedBox(width: 10),
                        RotatedBox(
                          quarterTurns: 3,
                          child: Transform.scale(
                            scale: 0.7,
                            child: Switch(
                              value: isOn,
                              onChanged: (bool value) {
                                setState(() {
                                  if (device['name'] == 'DOOR LOCK') {
                                    device['status'] =
                                        value ? 'UNLOCK' : 'LOCKED';
                                  } else {
                                    device['status'] = value ? 'ON' : 'OFF';
                                  }
                                });
                                sendWebSocketCommand(
                                    device['name']!, device['status']!);
                              },
                              activeColor: Colors.green,
                              activeTrackColor: Colors.green[800],
                              inactiveThumbColor: Colors.grey[700],
                              inactiveTrackColor: Colors.white,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 10),
                    Text(
                      device['name']!,
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 14,
                      ),
                    ),
                    Text(
                      device['status']!,
                      style: const TextStyle(
                        color: Colors.grey,
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}

