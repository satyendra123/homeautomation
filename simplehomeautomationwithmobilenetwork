1) flask acts as a centralized websocket server, ESP32 + react + flutter app will works as a websocket client for this project which controls the home automation with mobile internet only
from flask import Flask, request
from flask_socketio import SocketIO, emit
import json

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, cors_allowed_origins="*", async_mode="eventlet")

# Store device states
devices = {
    'DOOR LOCK': 'LOCKED',
    'DOWNLIGHTS': 'OFF',
    'BEDROOM': 'OFF',
    'TV': 'OFF',
    'SPEAKER R': 'OFF',
    'SPEAKER L': 'OFF',
    'IWATCH': 'OFF',
    'AIRCND': 'OFF'
}

@app.route('/')
def index():
    return "Flask-SocketIO Server Running"

# Client connected
@socketio.on('connect')
def handle_connect():
    print('Client connected')
    # Send current device states on connect
    emit('device_states', devices)

# Client disconnected
@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected')

# Receive command from client using 'device_status'
@socketio.on('device_status')
def handle_device_status(data):
    print(f"Received command: {data}")
    try:
        device = data.get('device')
        status = data.get('status')

        if device in devices:
            devices[device] = status
            # Broadcast updated status to all clients
            emit('device_update', {'device': device, 'status': status}, broadcast=True)
        else:
            print("Unknown device:", device)
    except Exception as e:
        print("Error handling command:", e)

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000)


2) html, talwind css, javascript acts as a websocket client
<!DOCTYPE HTML>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>ESP Socket.IO Client</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Add Socket.IO client script -->
  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js" integrity="sha384-E3G8dgmZJce0TkYloIgKhnlG6ijMnE9uvE5B78Tn4oCJ+PBvBFg9JsmX8kYjGVxg" crossorigin="anonymous"></script>
</head>
<body class="bg-gray-100 text-gray-900 font-sans">

  <div class="bg-teal-800 p-6 text-center">
    <h1 class="text-white text-3xl">ESP Socket.IO Server</h1>
  </div>

  <div class="max-w-xl mx-auto p-4">
    <div class="bg-white shadow-lg rounded-lg p-6">
      <h2 class="text-xl font-bold text-teal-700">Output - GPIO 2</h2>
      <p class="text-lg font-medium text-gray-600">State: <span id="state" class="text-teal-600">OFF</span></p>
      <button id="button" class="mt-4 bg-teal-600 text-white py-2 px-6 rounded-md hover:bg-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-400">Toggle</button>
    </div>
  </div>

  <script>
    const socket = io('http://192.168.1.21:5000');

    socket.on('connect', () => {
      console.log('Connected to Socket.IO server');
    });

    socket.on('device_update', function(data) {
      // Assuming data = { device: "GPIO2", status: "ON" or "OFF" }
      if (data.device === 'GPIO2') {
        document.getElementById('state').innerText = data.status;
      }
    });

    document.getElementById('button').addEventListener('click', function () {
      // Send a toggle request
      socket.emit('device_status', {
        device: 'GPIO2',
        status: document.getElementById('state').innerText === 'ON' ? 'OFF' : 'ON'
      });
    });
  </script>

</body>
</html>


3) esp32 acts as a websocket client
#include <WiFi.h>
#include <SocketIOclient.h>
#include <ArduinoJson.h>

const char* ssid = "TP-Link_474C";
const char* password = "55185295";
const char* host = "192.168.1.21";
const uint16_t port = 5000;
const char* path = "/socket.io/?EIO=4";

SocketIOclient socketIO;

const int ledPin = 2;

void handleDeviceUpdate(const char* payload) {
  DynamicJsonDocument doc(1024);
  DeserializationError error = deserializeJson(doc, payload);

  if (error) {
    Serial.print("JSON Parse Error: ");
    Serial.println(error.c_str());
    return;
  }

  if (!doc.is<JsonArray>()) return;

  const char* eventName = doc[0];
  JsonObject data = doc[1];

  if (strcmp(eventName, "device_update") == 0) {
    const char* device = data["device"];
    const char* status = data["status"];

    if (strcmp(device, "DOOR LOCK") == 0) {
      if (strcmp(status, "LOCKED") == 0) {
        digitalWrite(ledPin, LOW);
        Serial.println("LED ON: DOOR LOCKED");
      } else if (strcmp(status, "UNLOCK") == 0) {
        digitalWrite(ledPin, HIGH);
        Serial.println("LED OFF: DOOR UNLOCKED");
      }
    }
  }
}

void onSocketEvent(socketIOmessageType_t type, uint8_t * payload, size_t length) {
  switch (type) {
    case sIOtype_CONNECT:
      Serial.println("[SocketIO] Connected.");
      socketIO.send(sIOtype_CONNECT, "/");
      break;

    case sIOtype_EVENT:
      Serial.print("[SocketIO] Received: ");
      Serial.write(payload, length);
      Serial.println();
      handleDeviceUpdate((const char*)payload);
      break;

    case sIOtype_DISCONNECT:
      Serial.println("[SocketIO] Disconnected.");
      break;

    case sIOtype_ERROR:
      Serial.println("[SocketIO] Error.");
      break;

    default:
      break;
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  socketIO.begin(host, port, path);
  socketIO.onEvent(onSocketEvent);
}

void loop() {
  socketIO.loop();
}


EX-4 flutter app
from flask import Flask, request
from flask_socketio import SocketIO, emit
import json

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, cors_allowed_origins="*", async_mode="eventlet")

# Store device states
devices = {
    'DOOR LOCK': 'LOCKED',
    'DOWNLIGHTS': 'OFF',
    'BEDROOM': 'OFF',
    'TV': 'OFF',
    'SPEAKER R': 'OFF',
    'SPEAKER L': 'OFF',
    'IWATCH': 'OFF',
    'AIRCND': 'OFF'
}

@app.route('/')
def index():
    return "Flask-SocketIO Server Running"

# Client connected
@socketio.on('connect')
def handle_connect():
    print('Client connected')
    # Send current device states on connect
    emit('device_states', devices)

# Client disconnected
@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected')

# Receive command from client using 'device_status'
@socketio.on('device_status')
def handle_device_status(data):
    print(f"Received command: {data}")
    try:
        device = data.get('device')
        status = data.get('status')

        if device in devices:
            devices[device] = status
            # Broadcast updated status to all clients
            emit('device_update', {'device': device, 'status': status}, broadcast=True)
        else:
            print("Unknown device:", device)
    except Exception as e:
        print("Error handling command:", e)

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000)

