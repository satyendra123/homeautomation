1) flask acts as a centralized websocket server, ESP32 + react + flutter app will works as a websocket client for this project which controls the home automation with mobile internet only
from flask import Flask, request
from flask_socketio import SocketIO, emit
from flask_cors import CORS

app = Flask(__name__)
CORS(app)
socketio = SocketIO(app, cors_allowed_origins="*")

@socketio.on('connect')
def handle_connect():
    print('Client connected:', request.sid)
    emit('status', 'connected to cloud')

@socketio.on('message')
def handle_message(data):
    print('Received:', data)
    # Broadcast to all clients
    emit('message', data, broadcast=True)

@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected:', request.sid)

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000)

2) html, talwind css, javascript acts as a websocket client
<!DOCTYPE HTML>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>ESP WebSocket Server</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-gray-900 font-sans">

  <div class="bg-teal-800 p-6 text-center">
    <h1 class="text-white text-3xl">ESP WebSocket Server</h1>
  </div>

  <div class="max-w-xl mx-auto p-4">
    <div class="bg-white shadow-lg rounded-lg p-6">
      <h2 class="text-xl font-bold text-teal-700">Output - GPIO 2</h2>
      <p class="text-lg font-medium text-gray-600">State: <span id="state" class="text-teal-600">OFF</span></p>
      <button id="button" class="mt-4 bg-teal-600 text-white py-2 px-6 rounded-md hover:bg-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-400">Toggle</button>
    </div>
  </div>

  <script>
    var gateway = `ws://192.168.1.60/ws`;
    var websocket;

    window.addEventListener('load', onLoad);

    function initWebSocket() {
      console.log('Trying to open a WebSocket connection...');
      websocket = new WebSocket(gateway);
      websocket.onopen    = onOpen;
      websocket.onclose   = onClose;
      websocket.onmessage = onMessage;
    }

    function onOpen(event) {
      console.log('Connection opened');
    }

    function onClose(event) {
      console.log('Connection closed');
      setTimeout(initWebSocket, 2000);
    }

    function onMessage(event) {
      var state = event.data === "1" ? "ON" : "OFF";
      document.getElementById('state').innerHTML = state;
    }

    function toggle() {
      websocket.send('toggle');
    }

    function onLoad(event) {
      initWebSocket();
      document.getElementById('button').addEventListener('click', toggle);
    }
  </script>

</body>
</html>

3) esp32 acts as a websocket client
#include <WiFi.h>
#include <WebSocketsClient.h>

const char* ssid = "TP-Link_474C";
const char* password = "55185295";

const char* websocket_host = "192.168.1.100"; // ðŸ‘‰ Replace with your Flask server IP
const uint16_t websocket_port = 5000;
const char* websocket_path = "/socket.io/?EIO=4&transport=websocket";

bool ledState = 0;
const int ledPin = 2;

WebSocketsClient webSocket;

void sendLEDStatus() {
  String status = ledState ? "ON" : "OFF";
  webSocket.sendTXT(status);
  Serial.print("Sent to server: ");
  Serial.println(status);
}

void handleWebSocketMessage(uint8_t *payload, size_t length) {
  payload[length] = '\0';  // Null-terminate payload
  String message = String((char*)payload);
  Serial.print("Received from server: ");
  Serial.println(message);

  if (message == "toggle") {
    ledState = !ledState;
    sendLEDStatus(); // Send updated status back to Flask
  }
}

void webSocketEvent(WStype_t type, uint8_t *payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      Serial.println("WebSocket disconnected");
      break;

    case WStype_CONNECTED:
      Serial.println("WebSocket connected");
      webSocket.sendTXT("ESP32 connected");  // Initial hello
      break;

    case WStype_TEXT:
      handleWebSocketMessage(payload, length);
      break;

    default:
      break;
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.print("Connected! IP: ");
  Serial.println(WiFi.localIP());

  webSocket.begin(websocket_host, websocket_port, websocket_path);
  webSocket.onEvent(webSocketEvent);
  webSocket.setReconnectInterval(5000); // Auto-reconnect
}

void loop() {
  webSocket.loop();                   // WebSocket handler
  digitalWrite(ledPin, ledState);     // LED control
}

EX-4 flutter app
import 'package:flutter/material.dart';
import 'dart:io';
import 'package:web_socket_channel/web_socket_channel.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  late WebSocketChannel socketChannel;

  List<Map<String, String>> devices = [
    {'name': 'DOOR LOCK', 'status': 'OFF'},
    {'name': 'DOWNLIGHTS', 'status': 'OFF'},
    {'name': 'BEDROOM', 'status': 'OFF'},
    {'name': 'TV', 'status': 'OFF'},
    {'name': 'SPEAKER R', 'status': 'OFF'},
    {'name': 'SPEAKER L', 'status': 'OFF'},
    {'name': 'IWATCH', 'status': 'OFF'},
    {'name': 'AIRCND', 'status': 'OFF'},
  ];

  @override
  void initState() {
    super.initState();
    connectWebSocket();
  }

  // Connect to Flask WebSocket server
  void connectWebSocket() {
    try {
      socketChannel = WebSocketChannel.connect(
        Uri.parse('ws://<your_flask_server_ip>:5000/socket.io/?EIO=4&transport=websocket'),
      );

      socketChannel.stream.listen((message) {
        print('Received from Flask: $message');
        setState(() {
          // Process the incoming message
          // This part depends on the data structure sent by Flask
          var messageData = message;
          if (messageData.contains('device')) {
            String deviceName = messageData['device'];
            String status = messageData['status'];
            int index = devices.indexWhere((d) => d['name'] == deviceName);
            if (index != -1) {
              devices[index]['status'] = status;
            }
          }
        });
      });
    } catch (e) {
      print('WebSocket Error: $e');
    }
  }

  // Send WebSocket command to Flask server
  void sendWebSocketCommand(String device, String status) {
    if (socketChannel.closeCode == null) {
      String message = '{"device": "$device", "status": "$status"}';
      socketChannel.sink.add(message);
      print('Sent: $message');
    } else {
      print('WebSocket not connected');
    }
  }

  // Toggle device status
  void toggleDevice(Map<String, String> device) {
    setState(() {
      int index = devices.indexWhere((d) => d['name'] == device['name']);
      if (index != -1) {
        if (device['name'] == 'DOOR LOCK') {
          devices[index]['status'] =
              devices[index]['status'] == 'LOCKED' ? 'UNLOCK' : 'LOCKED';
        } else {
          devices[index]['status'] =
              devices[index]['status'] == 'ON' ? 'OFF' : 'ON';
        }
        sendWebSocketCommand(devices[index]['name']!, devices[index]['status']!);
      }
    });
  }

  // Return the appropriate icon for each device
  IconData getDeviceIcon(String deviceName) {
    switch (deviceName.toUpperCase()) {
      case 'DOOR LOCK':
        return Icons.door_front_door;
      case 'DOWNLIGHTS':
        return Icons.lightbulb;
      case 'BEDROOM':
        return Icons.bed;
      case 'TV':
        return Icons.tv;
      case 'SPEAKER R':
      case 'SPEAKER L':
        return Icons.speaker;
      case 'IWATCH':
        return Icons.watch;
      case 'AIRCND':
        return Icons.ac_unit;
      default:
        return Icons.device_unknown;
    }
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 3,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Home Automation'),
          bottom: const TabBar(
            tabs: [
              Tab(text: 'All'),
              Tab(text: 'Living Room'),
              Tab(text: 'Bedrooms'),
            ],
          ),
        ),
        body: TabBarView(
          children: [
            buildGrid(devices),
            buildGrid(devices.sublist(0, 4)),
            buildGrid(devices.sublist(4)),
          ],
        ),
      ),
    );
  }

  Widget buildGrid(List<Map<String, String>> items) {
    return Padding(
      padding: const EdgeInsets.all(10.0),
      child: GridView.builder(
        itemCount: items.length,
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          mainAxisSpacing: 10,
          crossAxisSpacing: 10,
          childAspectRatio: 1.0,
        ),
        itemBuilder: (context, index) {
          final device = items[index];
          final isOn = device['status'] == 'ON' || device['status'] == 'UNLOCK';

          return GestureDetector(
            onTap: () => toggleDevice(device),
            child: Card(
              elevation: 4,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15),
              ),
              child: Padding(
                padding: const EdgeInsets.all(12),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          getDeviceIcon(device['name']!),
                          size: 45,
                          color: Colors.blueGrey,
                        ),
                        const SizedBox(width: 10),
                        RotatedBox(
                          quarterTurns: 3,
                          child: Transform.scale(
                            scale: 0.7,
                            child: Switch(
                              value: isOn,
                              onChanged: (bool value) {
                                setState(() {
                                  if (device['name'] == 'DOOR LOCK') {
                                    device['status'] =
                                        value ? 'UNLOCK' : 'LOCKED';
                                  } else {
                                    device['status'] =
                                        value ? 'ON' : 'OFF';
                                  }
                                });
                                sendWebSocketCommand(device['name']!,
                                    device['status']!);
                              },
                              activeColor: Colors.green,
                              activeTrackColor: Colors.green[800],
                              inactiveThumbColor: Colors.grey[700],
                              inactiveTrackColor: Colors.white,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 10),
                    Text(
                      device['name']!,
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 14,
                      ),
                    ),
                    Text(
                      device['status']!,
                      style: const TextStyle(
                        color: Colors.grey,
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}
