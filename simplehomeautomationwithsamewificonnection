1) flutter app
import 'package:flutter/material.dart';
import 'package:web_socket_channel/web_socket_channel.dart';
import 'dart:convert';
import 'dart:developer'; // for log()

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  late WebSocketChannel channel;

  List<Map<String, String>> devices = [
    {'name': 'DOOR LOCK', 'status': 'OFF'},
    {'name': 'DOWNLIGHTS', 'status': 'OFF'},
    {'name': 'BEDROOM', 'status': 'OFF'},
    {'name': 'TV', 'status': 'OFF'},
    {'name': 'SPEAKER R', 'status': 'OFF'},
    {'name': 'SPEAKER L', 'status': 'OFF'},
    {'name': 'IWATCH', 'status': 'OFF'},
    {'name': 'AIRCND', 'status': 'OFF'},
  ];

  @override
  void initState() {
    super.initState();
    connectWebSocket();
  }

  void connectWebSocket() {
    channel = WebSocketChannel.connect(
  Uri.parse('ws://esp32.local/ws'),
);

    channel.stream.listen((data) {
      log('Received from ESP32: $data');
      final Map<String, dynamic> message = jsonDecode(data);
      setState(() {
        String deviceName = message['device'];
        String status = message['status'];
        int index = devices.indexWhere((d) => d['name'] == deviceName);
        if (index != -1) {
          devices[index]['status'] = status;
        }
      });
    });
  }

  void sendWebSocketCommand(String device, String status) {
    final message = {'device': device, 'status': status};
    final encodedMessage = jsonEncode(message);
    channel.sink.add(encodedMessage);
    log('Sent: $encodedMessage');
  }

  void toggleDevice(Map<String, String> device) {
    setState(() {
      int index = devices.indexWhere((d) => d['name'] == device['name']);
      if (index != -1) {
        if (device['name'] == 'DOOR LOCK') {
          devices[index]['status'] =
              devices[index]['status'] == 'LOCKED' ? 'UNLOCK' : 'LOCKED';
        } else {
          devices[index]['status'] =
              devices[index]['status'] == 'ON' ? 'OFF' : 'ON';
        }
        sendWebSocketCommand(devices[index]['name']!, devices[index]['status']!);
      }
    });
  }

  IconData getDeviceIcon(String deviceName) {
    switch (deviceName.toUpperCase()) {
      case 'DOOR LOCK':
        return Icons.door_front_door;
      case 'DOWNLIGHTS':
        return Icons.lightbulb;
      case 'BEDROOM':
        return Icons.bed;
      case 'TV':
        return Icons.tv;
      case 'SPEAKER R':
      case 'SPEAKER L':
        return Icons.speaker;
      case 'IWATCH':
        return Icons.watch;
      case 'AIRCND':
        return Icons.ac_unit;
      default:
        return Icons.device_unknown;
    }
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 4,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Home Automation'),
          bottom: const TabBar(
            tabs: [
              Tab(text: 'All'),
              Tab(text: 'Livingroom'),
              Tab(text: 'Bedroom'),
              Tab(text: 'WiFi'),
            ],
          ),
        ),
        body: TabBarView(
          children: [
            buildGrid(devices),
            buildGrid(devices.sublist(0, 4)),
            buildGrid(devices.sublist(4)),
            wifiConfigForm(),
          ],
        ),
      ),
    );
  }

  Widget buildGrid(List<Map<String, String>> items) {
    return Padding(
      padding: const EdgeInsets.all(10.0),
      child: GridView.builder(
        itemCount: items.length,
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          mainAxisSpacing: 10,
          crossAxisSpacing: 10,
          childAspectRatio: 1.0,
        ),
        itemBuilder: (context, index) {
          final device = items[index];
          final isOn = device['status'] == 'ON' || device['status'] == 'UNLOCK';

          return GestureDetector(
            onTap: () => toggleDevice(device),
            child: Card(
              elevation: 4,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15),
              ),
              child: Padding(
                padding: const EdgeInsets.all(12),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          getDeviceIcon(device['name']!),
                          size: 45,
                          color: Colors.blueGrey,
                        ),
                        const SizedBox(width: 10),
                        RotatedBox(
                          quarterTurns: 3,
                          child: Transform.scale(
                            scale: 0.7,
                            child: Switch(
                              value: isOn,
                              onChanged: (bool value) {
                                setState(() {
                                  if (device['name'] == 'DOOR LOCK') {
                                    device['status'] =
                                        value ? 'UNLOCK' : 'LOCKED';
                                  } else {
                                    device['status'] = value ? 'ON' : 'OFF';
                                  }
                                });
                                sendWebSocketCommand(
                                    device['name']!, device['status']!);
                              },
                              activeColor: Colors.green,
                              activeTrackColor: Colors.green[800],
                              inactiveThumbColor: Colors.grey[700],
                              inactiveTrackColor: Colors.white,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 10),
                    Text(
                      device['name']!,
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 14,
                      ),
                    ),
                    Text(
                      device['status']!,
                      style: const TextStyle(
                        color: Colors.grey,
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget wifiConfigForm() {
    final TextEditingController mdnsController = TextEditingController();
    final TextEditingController ssidController = TextEditingController();
    final TextEditingController passwordController = TextEditingController();
    final TextEditingController staticPassController = TextEditingController();

    return Padding(
      padding: const EdgeInsets.all(20.0),
      child: Column(
        children: [
          TextField(
            controller: mdnsController,
            decoration: const InputDecoration(labelText: 'ESP32 mDNS (e.g., esp32.local)'),
          ),
          TextField(
            controller: ssidController,
            decoration: const InputDecoration(labelText: 'WiFi SSID'),
          ),
          TextField(
            controller: passwordController,
            decoration: const InputDecoration(labelText: 'WiFi Password'),
            obscureText: true,
          ),
          TextField(
            controller: staticPassController,
            decoration: const InputDecoration(labelText: 'Static Password'),
            obscureText: true,
          ),
          const SizedBox(height: 20),
          ElevatedButton(
            onPressed: () {
              if (staticPassController.text == '1234') {
                final config = {
                  'ssid': ssidController.text,
                  'password': passwordController.text,
                };

                final dataToSend = {
                  'mdns': mdnsController.text,
                  'data': config,
                };

                final encodedData = jsonEncode(dataToSend);

                channel.sink.add(encodedData);

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('WiFi config sent to ESP32')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Invalid static password')),
                );
              }
            },
            child: const Text('Send Configuration'),
          ),
        ],
      ),
    );
  }
}

2) esp32 works as websocket server. everytime it connects with the network its ip changing so that why i have used the mdns so that we can ping it with its name. also from the app only we can change it to connect with the new wifi. and by any how it will not connect with that wifi then it goes into the AP mode where it works as a hotspot and from the mobile we will connect to that esp32 hotspot and open the app and do the settings or control it.
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include <ArduinoJson.h>
#include <Preferences.h>
#include <ESPmDNS.h>

const char* default_ssid = "TP-Link_474C";
const char* default_password = "55185295";

Preferences preferences;
AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

const int ledPin = 2;
const int ledPin2 = 4;
const int pwmLedChannel = 0;
const int freq = 5000;
const int resolution = 8;

void connectWiFi(const char* ssid, const char* password) {
  WiFi.begin(ssid, password);
  Serial.printf("Connecting to WiFi SSID: %s\n", ssid);
  unsigned long startAttemptTime = millis();

  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
    delay(100);
    Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected to WiFi successfully!");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\nFailed to connect to WiFi.");
    // Start configuration portal if failed
    startConfigPortal();
  }
}


void startConfigPortal() {
  Serial.println("Starting Configuration AP mode...");

  WiFi.softAP("ESP32_Config", "12345678"); // Start Access Point with SSID and password

  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

  // mDNS also for AP
  if (!MDNS.begin("esp32")) {
    Serial.println("Error starting mDNS in AP mode!");
  } else {
    Serial.println("mDNS started at http://esp32.local in AP mode");
  }
}


void saveWiFiCredentials(const char* ssid, const char* password) {
  preferences.begin("wifi", false); // open Preferences in RW mode
  preferences.putString("ssid", ssid); // Save SSID
  preferences.putString("password", password); // Save password
  preferences.end();
  
  Serial.println("WiFi credentials saved to flash.");
  Serial.print("New SSID: ");
  Serial.println(ssid);
  Serial.print("New Password: ");
  Serial.println(password);  // You can mask the password for security reasons
  
  delay(500); // Small delay to ensure Preferences are saved

  Serial.println("Rebooting to apply new WiFi settings...");
  delay(1000);
  ESP.restart(); // Restart to apply the new settings
}



void handleDeviceUpdate(const char* payload) {
  DynamicJsonDocument doc(1024);
  DeserializationError error = deserializeJson(doc, payload);

  if (error) {
    Serial.print("JSON Parse Error: ");
    Serial.println(error.c_str());
    return;
  }

  if (!doc.is<JsonObject>()) return;

  // Access the "data" object which contains the WiFi credentials
  JsonObject data = doc["data"];

  // Check if it contains both SSID and password
  if (data.containsKey("ssid") && data.containsKey("password")) {
    String newSSID = data["ssid"].as<String>();
    String newPass = data["password"].as<String>();

    Serial.println("Received new WiFi credentials via WebSocket.");
    Serial.print("New SSID: ");
    Serial.println(newSSID);
    Serial.print("New Password: ");
    Serial.println(newPass);

    saveWiFiCredentials(newSSID.c_str(), newPass.c_str());
    return; // stop further processing
  }


  const char* device = doc["device"];
  const char* status = doc["status"];
  
  Serial.print("Device: ");
  Serial.println(device);
  Serial.print("Status: ");
  Serial.println(status);

  int brightness = doc.containsKey("brightness") ? doc["brightness"].as<int>() : -1;

  if (strcmp(device, "DOOR LOCK") == 0) {
    if (strcmp(status, "LOCKED") == 0) {
      digitalWrite(ledPin, LOW);
      Serial.println("Door locked (LED OFF)");
    } else if (strcmp(status, "UNLOCK") == 0) {
      digitalWrite(ledPin, HIGH);
      Serial.println("Door unlocked (LED ON)");
    } else {
      Serial.println("Unknown door lock status.");
    }
  }
  else if (strcmp(device, "DOWNLIGHTS") == 0) {
    if (strcmp(status, "ON") == 0) {
      digitalWrite(ledPin2, HIGH);
      Serial.println("Downlights ON");
    } else if (strcmp(status, "OFF") == 0) {
      digitalWrite(ledPin2, LOW);
      Serial.println("Downlights OFF");
    }

    if (brightness >= 0 && brightness <= 255) {
      ledcWrite(pwmLedChannel, brightness);
      Serial.printf("Downlights brightness set to %d\n", brightness);
    }
  }
  else {
    Serial.println("Unknown device type.");
  }
}

// WebSocket event handler
void onWsEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len) {
  if (type == WS_EVT_CONNECT) {
    Serial.println("WebSocket client connected.");
  } 
  else if (type == WS_EVT_DISCONNECT) {
    Serial.println("WebSocket client disconnected.");
  } 
  else if (type == WS_EVT_DATA) {
    String message = String((char*)data).substring(0, len);
    Serial.println("WebSocket message: " + message);
    handleDeviceUpdate(message.c_str());
  }
}

void setup() {
  Serial.begin(115200);

  pinMode(ledPin, OUTPUT);
  pinMode(ledPin2, OUTPUT);
  digitalWrite(ledPin, LOW);
  digitalWrite(ledPin2, LOW);
  
  ledcSetup(pwmLedChannel, freq, resolution);
  ledcAttachPin(ledPin2, pwmLedChannel);

  preferences.begin("wifi", true);  // open Preferences in read-only mode
  String saved_ssid = preferences.getString("ssid", "");
  String saved_pass = preferences.getString("password", "");
  preferences.end();

  // Print stored WiFi credentials to the Serial Monitor
  Serial.println("Stored WiFi credentials:");
  Serial.print("SSID: ");
  Serial.println(saved_ssid);
  Serial.print("Password: ");
  Serial.println(saved_pass);  // You can choose to mask the password for security reasons
  
  // If there are saved credentials, attempt to connect using them
  if (saved_ssid.length() > 0 && saved_pass.length() > 0) {
    connectWiFi(saved_ssid.c_str(), saved_pass.c_str());
  } else {
    // If no saved credentials, connect using default SSID and password
    connectWiFi(default_ssid, default_password);
  }

  // Start mDNS for network discovery
  if (!MDNS.begin("esp32")) {
    Serial.println("Error starting mDNS!");
  } else {
    Serial.println("mDNS started at http://esp32.local");
  }

  // Initialize WebSocket and server
  ws.onEvent(onWsEvent);
  server.addHandler(&ws);
  server.begin();
}

void loop() {
  ws.cleanupClients();
}

3) simple html, talwind css and javascript code

<!DOCTYPE HTML>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>ESP WebSocket Server</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-gray-900 font-sans">

  <div class="bg-teal-800 p-6 text-center">
    <h1 class="text-white text-3xl">ESP WebSocket Server</h1>
  </div>

  <div class="max-w-xl mx-auto p-4">
    <div class="bg-white shadow-lg rounded-lg p-6">
      <h2 class="text-xl font-bold text-teal-700">Output - GPIO 2</h2>
      <p class="text-lg font-medium text-gray-600">State: <span id="state" class="text-teal-600">OFF</span></p>
      <button id="button" class="mt-4 bg-teal-600 text-white py-2 px-6 rounded-md hover:bg-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-400">Toggle</button>
    </div>
  </div>

  <script>
    var gateway = `ws://192.168.1.60/ws`;
    var websocket;

    window.addEventListener('load', onLoad);

    function initWebSocket() {
      console.log('Trying to open a WebSocket connection...');
      websocket = new WebSocket(gateway);
      websocket.onopen    = onOpen;
      websocket.onclose   = onClose;
      websocket.onmessage = onMessage;
    }

    function onOpen(event) {
      console.log('Connection opened');
    }

    function onClose(event) {
      console.log('Connection closed');
      setTimeout(initWebSocket, 2000);
    }

    function onMessage(event) {
      var state = event.data === "1" ? "ON" : "OFF";
      document.getElementById('state').innerHTML = state;
    }

    function toggle() {
      websocket.send('toggle');
    }

    function onLoad(event) {
      initWebSocket();
      document.getElementById('button').addEventListener('click', toggle);
    }
  </script>

</body>
</html>
