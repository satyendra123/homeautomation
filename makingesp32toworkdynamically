// actually mai chahta hu ki mai dynamically kisi bhi esp32 ko control kar saku dynamically uski ip change karke. means kal ko agr mujhe koi new esp32 wifi switch lgani ho to mai kaise lgaunga us chiz ko apne app ke through to maine apne app me ye functionality dali hai ki
// mai ifi ka ssid aur password ko apne mobile ke app se hi dal saku

#include <WiFi.h>
#include <SocketIOclient.h>
#include <ArduinoJson.h>
#include <Preferences.h>
#include <ESPmDNS.h>

const char* default_ssid = "Redmi10";
const char* default_password = "1234abcd";
const char* host = "192.168.154.76";
const uint16_t port = 5000;
const char* path = "/socket.io/?EIO=4";

SocketIOclient socketIO;
Preferences preferences;

const int ledPin = 2;

void saveWiFiCredentials(const char* ssid, const char* password) {
  preferences.begin("wifi", false);
  preferences.putString("ssid", ssid);
  preferences.putString("password", password);
  preferences.end();
}

void handleDeviceUpdate(const char* payload) {
  DynamicJsonDocument doc(1024);
  DeserializationError error = deserializeJson(doc, payload);

  if (error) {
    Serial.print("JSON Parse Error: ");
    Serial.println(error.c_str());
    return;
  }

  if (!doc.is<JsonArray>()) return;

  const char* eventName = doc[0];
  JsonObject data = doc[1];

  if (strcmp(eventName, "device_update") == 0) {
    const char* device = data["device"];
    const char* status = data["status"];

    if (strcmp(device, "DOOR LOCK") == 0) {
      if (strcmp(status, "LOCKED") == 0) {
        digitalWrite(ledPin, LOW);
        Serial.println("LED ON: DOOR LOCKED");
      } else if (strcmp(status, "UNLOCK") == 0) {
        digitalWrite(ledPin, HIGH);
        Serial.println("LED OFF: DOOR UNLOCKED");
      }
    }
  } else if (strcmp(eventName, "wifi_config") == 0) {
    JsonObject wifiData = data;
    const char* ssid = wifiData["ssid"];
    const char* password = wifiData["password"];

    Serial.printf("Received new WiFi credentials: %s / %s\n", ssid, password);
    saveWiFiCredentials(ssid, password);

    Serial.println("Restarting ESP to apply new WiFi...");
    delay(2000);
    ESP.restart();
  }
}

void onSocketEvent(socketIOmessageType_t type, uint8_t * payload, size_t length) {
  switch (type) {
    case sIOtype_CONNECT:
      Serial.println("[SocketIO] Connected.");
      socketIO.send(sIOtype_CONNECT, "/");
      break;

    case sIOtype_EVENT:
      Serial.print("[SocketIO] Received: ");
      Serial.write(payload, length);
      Serial.println();
      handleDeviceUpdate((const char*)payload);
      break;

    case sIOtype_DISCONNECT:
      Serial.println("[SocketIO] Disconnected.");
      break;

    case sIOtype_ERROR:
      Serial.println("[SocketIO] Error.");
      break;

    default:
      break;
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  preferences.begin("wifi", true);
  String saved_ssid = preferences.getString("ssid", default_ssid);
  String saved_pass = preferences.getString("password", default_password);
  preferences.end();

  Serial.printf("Connecting to WiFi: %s\n", saved_ssid.c_str());
  WiFi.begin(saved_ssid.c_str(), saved_pass.c_str());

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  if (!MDNS.begin("esp32")) {  // You can change "esp32" to any unique name
    Serial.println("Error setting up mDNS responder!");
  } else {
    Serial.println("mDNS responder started. Access with http://esp32.local");
  }

  socketIO.begin(host, port, path);
  socketIO.onEvent(onSocketEvent);
}

void loop() {
  socketIO.loop();
}

//EX-2 flask code 
from flask import Flask, request
from flask_socketio import SocketIO, emit
import json

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, cors_allowed_origins="*", async_mode="eventlet")

# Store device states
devices = {
    'DOOR LOCK': 'LOCKED',
    'DOWNLIGHTS': 'OFF',
    'BEDROOM': 'OFF',
    'TV': 'OFF',
    'SPEAKER R': 'OFF',
    'SPEAKER L': 'OFF',
    'IWATCH': 'OFF',
    'AIRCND': 'OFF'
}

@app.route('/')
def index():
    return "Flask-SocketIO Server Running"

@socketio.on('connect')
def handle_connect():
    print('Client connected')
    emit('device_states', devices)

@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected')

@socketio.on('device_status')
def handle_device_status(data):
    print(f"Received command: {data}")
    try:
        device = data.get('device')
        status = data.get('status')

        if device in devices:
            devices[device] = status
            emit('device_update', {'device': device, 'status': status}, broadcast=True)
        else:
            print("Unknown device:", device)
    except Exception as e:
        print("Error handling command:", e)
        
# Receive Wi-Fi configuration from Flutter app
@socketio.on('wifi_config')
def handle_wifi_config(data):
    try:
        mdns = data.get('mdns')
        wifi_config = data.get('data')
        ssid = wifi_config.get('ssid')
        password = wifi_config.get('password')

        print(f"Received Wi-Fi config from Flutter: mDNS = {mdns}, SSID = {ssid}, Password = {password}")
        emit('wifi_config', {'ssid': ssid, 'password': password}, room='esp32')

    except Exception as e:
        print("Error handling Wi-Fi config:", e)

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000)

3) flutter app which have the setting of sending the wifi ssid and password setting to esp32
import 'package:flutter/material.dart';
import 'package:socket_io_client/socket_io_client.dart' as IO;

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  late IO.Socket socket;

  List<Map<String, String>> devices = [
    {'name': 'DOOR LOCK', 'status': 'OFF'},
    {'name': 'DOWNLIGHTS', 'status': 'OFF'},
    {'name': 'BEDROOM', 'status': 'OFF'},
    {'name': 'TV', 'status': 'OFF'},
    {'name': 'SPEAKER R', 'status': 'OFF'},
    {'name': 'SPEAKER L', 'status': 'OFF'},
    {'name': 'IWATCH', 'status': 'OFF'},
    {'name': 'AIRCND', 'status': 'OFF'},
  ];

  @override
  void initState() {
    super.initState();
    connectSocketIO();
  }

  void connectSocketIO() {
    socket = IO.io('http://esp32.local:5000', <String, dynamic>{
      'transports': ['websocket'],
      'autoConnect': false,
    });

    socket.connect();

    socket.onConnect((_) {
      print('Connected to Flask');
    });

    socket.on('device_status', (data) {
      print('Received from Flask: $data');
      setState(() {
        String deviceName = data['device'];
        String status = data['status'];
        int index = devices.indexWhere((d) => d['name'] == deviceName);
        if (index != -1) {
          devices[index]['status'] = status;
        }
      });
    });

    socket.onDisconnect((_) {
      print('Disconnected from Flask');
    });
  }

  void sendWebSocketCommand(String device, String status) {
    if (socket.connected) {
      final message = {'device': device, 'status': status};
      socket.emit('device_status', message);
      print('Sent: $message');
    } else {
      print('Socket not connected');
    }
  }

  void toggleDevice(Map<String, String> device) {
    setState(() {
      int index = devices.indexWhere((d) => d['name'] == device['name']);
      if (index != -1) {
        if (device['name'] == 'DOOR LOCK') {
          devices[index]['status'] =
              devices[index]['status'] == 'LOCKED' ? 'UNLOCK' : 'LOCKED';
        } else {
          devices[index]['status'] =
              devices[index]['status'] == 'ON' ? 'OFF' : 'ON';
        }
        sendWebSocketCommand(devices[index]['name']!, devices[index]['status']!);
      }
    });
  }

  IconData getDeviceIcon(String deviceName) {
    switch (deviceName.toUpperCase()) {
      case 'DOOR LOCK':
        return Icons.door_front_door;
      case 'DOWNLIGHTS':
        return Icons.lightbulb;
      case 'BEDROOM':
        return Icons.bed;
      case 'TV':
        return Icons.tv;
      case 'SPEAKER R':
      case 'SPEAKER L':
        return Icons.speaker;
      case 'IWATCH':
        return Icons.watch;
      case 'AIRCND':
        return Icons.ac_unit;
      default:
        return Icons.device_unknown;
    }
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 4,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Home Automation'),
          bottom: const TabBar(
            tabs: [
              Tab(text: 'All'),
              Tab(text: 'Living Room'),
              Tab(text: 'Bedrooms'),
              Tab(text: 'WiFi'),
            ],
          ),
        ),
        body: TabBarView(
          children: [
            buildGrid(devices),
            buildGrid(devices.sublist(0, 4)),
            buildGrid(devices.sublist(4)),
            wifiConfigForm(),
          ],
        ),
      ),
    );
  }

  Widget buildGrid(List<Map<String, String>> items) {
    return Padding(
      padding: const EdgeInsets.all(10.0),
      child: GridView.builder(
        itemCount: items.length,
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          mainAxisSpacing: 10,
          crossAxisSpacing: 10,
          childAspectRatio: 1.0,
        ),
        itemBuilder: (context, index) {
          final device = items[index];
          final isOn = device['status'] == 'ON' || device['status'] == 'UNLOCK';

          return GestureDetector(
            onTap: () => toggleDevice(device),
            child: Card(
              elevation: 4,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15),
              ),
              child: Padding(
                padding: const EdgeInsets.all(12),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          getDeviceIcon(device['name']!),
                          size: 45,
                          color: Colors.blueGrey,
                        ),
                        const SizedBox(width: 10),
                        RotatedBox(
                          quarterTurns: 3,
                          child: Transform.scale(
                            scale: 0.7,
                            child: Switch(
                              value: isOn,
                              onChanged: (bool value) {
                                setState(() {
                                  if (device['name'] == 'DOOR LOCK') {
                                    device['status'] =
                                        value ? 'UNLOCK' : 'LOCKED';
                                  } else {
                                    device['status'] = value ? 'ON' : 'OFF';
                                  }
                                });
                                sendWebSocketCommand(
                                    device['name']!, device['status']!);
                              },
                              activeColor: Colors.green,
                              activeTrackColor: Colors.green[800],
                              inactiveThumbColor: Colors.grey[700],
                              inactiveTrackColor: Colors.white,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 10),
                    Text(
                      device['name']!,
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 14,
                      ),
                    ),
                    Text(
                      device['status']!,
                      style: const TextStyle(
                        color: Colors.grey,
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget wifiConfigForm() {
    final TextEditingController mdnsController = TextEditingController();
    final TextEditingController ssidController = TextEditingController();
    final TextEditingController passwordController = TextEditingController();
    final TextEditingController staticPassController = TextEditingController();

    return Padding(
      padding: const EdgeInsets.all(20.0),
      child: Column(
        children: [
          TextField(
            controller: mdnsController,
            decoration: const InputDecoration(labelText: 'ESP32 mDNS (e.g., esp32.local)'),
          ),
          TextField(
            controller: ssidController,
            decoration: const InputDecoration(labelText: 'WiFi SSID'),
          ),
          TextField(
            controller: passwordController,
            decoration: const InputDecoration(labelText: 'WiFi Password'),
            obscureText: true,
          ),
          TextField(
            controller: staticPassController,
            decoration: const InputDecoration(labelText: 'Static Password'),
            obscureText: true,
          ),
          const SizedBox(height: 20),
          ElevatedButton(
            onPressed: () {
              if (staticPassController.text == '1234') {
                final config = {
                  'ssid': ssidController.text,
                  'password': passwordController.text,
                };

                final mdns = mdnsController.text;

                socket.emit('wifi_config', {
                  'mdns': mdns,
                  'data': config,
                });

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('WiFi config sent to ESP32')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Invalid static password')),
                );
              }
            },
            child: const Text('Send Configuration'),
          ),
        ],
      ),
    );
  }
}
